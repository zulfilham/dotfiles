#!/data/data/com.termux/files/usr/bin/bash

# Personal functions
function copy() {
   if (($# == 0)); then
cat << EOF
Usage: copy (termux | internal) [<rsync-options>]
   or: copy external [rsync-options]
EOF
      return 0;
   fi;

   local source destination extra_options;

   case "$1" in
   termux)
      source=$FILES;
      destination=/d/Zulfilham/Backups/Termux/files;
      extra_options=(--exclude=/{home/.suroot,usr/var/run});
      ;;
   internal)
      source=$INTERNAL;
      destination="/d/Zulfilham/Backups/Internal Storage/files";
      extra_options=(--exclude=/{"db????*??*??".{sql,db},Diary});
      ;;
   external)
      if [ -v EXTERNAL ]; then
         source=$EXTERNAL;
         destination="/d/Zulfilham/Backups/External Storage/files";
      else
         echo "Fatal: SD card is not installed on this device" 1>&2;
         return 1;
      fi;
      ;;
   *)
      echo "Fatal: Invalid object '$1'" 1>&2;
      return 1;
      ;;
   esac;
   rsync --archive "${extra_options[@]}" "${@:2}" -- "$source/" "$COMPUTER_ADDRESS:\"${destination//\"/\\\"}/\"";
}

function sync() {
   if (($# == 0)); then
cat << EOF
Usage: sync gameguardian_scripts [<rsync-options>]
   or: sync audios [rsync-options]
EOF
      return 0;
   fi;

   local source destination extra_options;

   case "$1" in
   gameguardian_scripts)
      source="$INTERNAL/GameGuardian Scripts";

      if [ -d "$source" ]; then
         destination="/d/Zulfilham/Repositories/Zulfilham/GameGuardian Scripts";
         extra_options=(--exclude=/.git);
      else
         echo "Fatal: '${source//\'/\'\\\'\'}': Not a directory" 1>&2;
         return 1;
      fi;
      ;;
   audios)
      if [ -v EXTERNAL ]; then
         source=$EXTERNAL_STORAGE/Audios;

         if [ -d "$source" ]; then
            destination=/e/Zulfilham/Audios;
         else
            echo "Fatal: '${source//\'/\'\\\'\'}': Not a directory" 1>&2;
            return 1;
         fi;
      else
         echo "Fatal: SD card is not installed on this device" 1>&2;
         return 1;
      fi;
      ;;
   *)
      echo "Fatal: Invalid object '$1'" 1>&2;
      return 1;
      ;;
   esac;
   rsync --archive --update "${extra_options[@]}" "${@:2}" -- "$source/" "$COMPUTER_ADDRESS:\"${destination//\"/\\\"}/\"" && \
   rsync --archive --update "${extra_options[@]}" "${@:2}" -- "$COMPUTER_ADDRESS:\"${destination//\"/\\\"}/\"" "$source/";
}

function remove() {
   if (($# == 0)); then
cat << EOF
Usage: remove garbage [options]
EOF
      return 0;
   fi;

   case "$1" in
   garbage)
      local source=(/storage/emulated/0/{.dlprovider,.fe_tmp,.profig.os,DCIM/.thumbnails,MIUI/{Gallery,debug_log},WhatsApp/Databases/msgstore-????-??-??.1.db.crypt14,dctp,did,wlan_logs});
      ;;
   *)
      echo "Fatal: Invalid object '$1'" 1>&2;
      return 1;
      ;;
   esac;
   rm --force --recursive "${@:2}" -- "${source[@]}";
}

function mirror() {
   if (($# == 0)); then
cat << EOF
Usage: mirror (termux | internal | gameguardian_scripts) [<rsync-options>]
   or: mirror (external | audios | mlbb_data) [rsync-options]
EOF
      return 0;
   fi;

   local source destination extra_options;

   case "$1" in
   termux)
      source=$FILES;
      destination=/d/Zulfilham/Backups/Termux/files;
      extra_options=(--exclude=/{home/.suroot,usr/var/run});
      ;;
   internal)
      source=$INTERNAL;
      destination="/d/Zulfilham/Backups/Internal Storage/files";
      extra_options=(--exclude=/{"db????*??*??".{sql,db},Diary});
      ;;
   external)
      if [ -v EXTERNAL ]; then
         source=$EXTERNAL;
         destination="/d/Zulfilham/Backups/External Storage/files";
      else
         echo "Fatal: SD card is not installed on this device" 1>&2;
         return 1;
      fi;
      ;;
   gameguardian_scripts)
      source="$INTERNAL/GameGuardian Scripts";

      if [ -d "$source" ]; then
         destination="/d/Zulfilham/Repositories/Zulfilham/GameGuardian Scripts";
         extra_options=(--exclude=/.git);
      else
         echo "Fatal: '${source//\'/\'\\\'\'}': Not a directory" 1>&2;
         return 1;
      fi;
      ;;
   audios)
      if [ -v EXTERNAL ]; then
         source=$EXTERNAL_STORAGE/Audios;

         if [ -d "$source" ]; then
            destination=/e/Zulfilham/Audios;
         else
            echo "Fatal: '${source//\'/\'\\\'\'}': Not a directory" 1>&2;
            return 1;
         fi;
      else
         echo "Fatal: SD card is not installed on this device" 1>&2;
         return 1;
      fi;
      ;;
   mlbb_data)
      source=$INTERNAL/Android/data/com.mobile.legends/files;

      if [ -d "$source" ]; then
         destination="/d/Zulfilham/Backups/Mobile Legends - Bang Bang/files";
      else
         echo "Fatal: '${source//\'/\'\\\'\'}': Not a directory" 1>&2;
         return 1;
      fi;
      ;;
   esac;
   rsync --delete --archive "${extra_options[@]}" "${@:2}" -- "$source/" "$COMPUTER_ADDRESS:\"${destination//\"/\\\"}/\"";
}

# General functions
# Usage: compare <file1> <file2>
# Check whether 2 files are identical
function compare() {
   if (($# != 2)); then
      echo "Fatal: Expected exactly 2 arguments, $# given" 1>&2;
      return 1;
   elif [ ! -f "$1" ]; then
      echo "Fatal: '${1//\'/\'\\\'\'}': Not a regular file" 1>&2;
      return 1;
   elif [ ! -f "$2" ]; then
      echo "Fatal: '${2//\'/\'\\\'\'}': Not a regular file" 1>&2;
      return 1;
   fi;
   cmp --silent -- "$1" "$2" && echo $'\x1b[32midentical\x1b[0m' 1>&2 || echo $'\x1b[31mdifferent\x1b[0m' 1>&2;
}

# Usage: apk-install <apk-file>
# Install an application in Android
function apk-install() {
   if (($# != 1)); then
      echo "Fatal: Expected exactly 1 argument, $# given" 1>&2;
      return 1;
   elif [ ! -f "$1" ]; then
      echo "Fatal: '${2//\'/\'\\\'\'}': Not a regular file" 1>&2;
      return 1;
   fi;
   am start -n com.google.android.packageinstaller/com.android.packageinstaller.PackageInstallerActivity -d "file://$(realpath "$1")" > /dev/null;
}

# Usage: apk-uninstall <package-name>
# Uninstall an application in Android
function apk-uninstall() {
   if (($# != 1)); then
      echo "Fatal: Expected exactly 1 argument, $# given" 1>&2;
      return 1;
   fi;
   am start -n com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity -d "$1" > /dev/null;
}

# Usage: set_title [arg...]
# Set terminal title
function set_title() {
   echo -e "\033]0;$@\007";
}
