#!/data/data/com.termux/files/usr/bin/bash

function show_help() {
   declare -A chars=([bold]=$'\x1b[38;5;15;1m' [normal]=$'\x1b[0m');
cat - << EOF
Usage: bash $1 <command> <object>
Personal cron jobs program

Valid commands are:

   ${chars[bold]}copy${chars[normal]}      Copy ${chars[bold]}object${chars[normal]} (only the differences) from local to remote
   ${chars[bold]}sync${chars[normal]}      Likewise, but also copy ${chars[bold]}object${chars[normal]} from remote to local
   ${chars[bold]}remove${chars[normal]}    Remove ${chars[bold]}object${chars[normal]}

Valid objects are:

   ${chars[bold]}termux${chars[normal]}                  (only ${chars[bold]}copy${chars[normal]})
   ${chars[bold]}internal${chars[normal]}                (only ${chars[bold]}copy${chars[normal]})
   ${chars[bold]}external${chars[normal]}                (only ${chars[bold]}copy${chars[normal]})
   ${chars[bold]}gameguardian_scripts${chars[normal]}    (only ${chars[bold]}sync${chars[normal]})
   ${chars[bold]}audios${chars[normal]}                  (only ${chars[bold]}sync${chars[normal]})
   ${chars[bold]}garbage${chars[normal]}                 (only ${chars[bold]}remove${chars[normal]})

Author: Zulfilham <code.zulfilham@gmail.com>
EOF
}

function cronlog() {
   if (($# == 0)); then
cat - >> ~/.cronlog << EOF
------------------------------------------------------------------------

Command: $COMMAND
Date:    $DATE
Status:  RUNNING
Message: $MESSAGE

EOF
      find ~/.cronlog -size +262144c -exec sed --null-data --in-place 's/-\{72\}/\x00/g; s/^\x00[^\x00]\+//; s/\x00/------------------------------------------------------------------------/g' {} +;
   else
      COMMAND="${COMMAND//\\/\\\\}";
      COMMAND="${COMMAND//\&/\\\&}";
      MESSAGE="${MESSAGE//\\/\\\\}";
      MESSAGE="${MESSAGE//\&/\\\&}";
      sed --null-data --in-place \
      "s/-\{72\}/\x00/g; s/Command:[[:space:]]*[^\x00]\+[[:space:]]*Date:[[:space:]]*$DATE[^\x00]*[[:space:]]*Status:[[:space:]]*RUNNING[[:space:]]*Message:[[:space:]]*[^\x00]*/Command: ${COMMAND//\//\\\/}\x0aDate:    $DATE -> $(date "+%F %T %Z")\x0aStatus:  $1\x0aMessage: ${MESSAGE//\//\\\/}\x0a\x0a/; s/\x00/------------------------------------------------------------------------/g" \
      -- ~/.cronlog;
   fi;
}

function ssh_connect() {
   MESSAGE="$(ssh -p 8022 "$COMPUTER_ADDRESS" "${1:-exit}" 2>&1)";

   if (($? > 0)); then
      echo -e "Fatal: SSH connection cannot be established\n$MESSAGE" 1>&2;
      return 1;
   fi;
}

function copy() {
   if ssh_connect "mkdir --parents -- \"${DESTINATION//\"/\\\"}\""; then
      MESSAGE="$(rsync "$@" --archive --rsh="ssh -p 8022" -- "$SOURCE/" "$COMPUTER_ADDRESS:$DESTINATION/" 2>&1)" || return 1;
   else
      return 1;
   fi;
}

function sync() {
   if ssh_connect "mkdir --parents -- \"${DESTINATION//\"/\\\"}\""; then
      MESSAGE="$(rsync --archive --update --rsh="ssh -p 8022" -- "$SOURCE/" "$COMPUTER_ADDRESS:$DESTINATION/" 2>&1)" || return 1;
      MESSAGE="$(rsync --archive --update --rsh="ssh -p 8022" -- "$COMPUTER_ADDRESS:$DESTINATION/" "$SOURCE/" 2>&1)" || return 1;
   else
      return 1;
   fi;
}

function remove() {
   rm --force --recursive -- "${SOURCE[@]}";
}

function main() {
   if (($# == 0)); then
      show_help "$0";
      return 0;
   elif (($# > 2)); then
      echo "Fatal: Extra arguments is not allowed" 1>&2;
      return 1;
   fi;

   if ! [ "$1" == copy -o "$1" == sync -o "$1" == remove ]; then
      echo "Fatal: Invalid command '$1'" 1>&2;
      return 1;
   fi;

   if (($# == 1)); then
      echo "Fatal: Expected exactly an object, no object given" 1>&2;
      return 1;
   fi;

   COMMAND="bash $0 $1 $2";
   DATE=$(date "+%F %T %Z");
   STATUS=RUNNING;

   case "$2" in
   termux)
      if [ $1 == copy ]; then
         SOURCE=$FILES;
         DESTINATION=/d/Zulfilham/Backups/Termux/files;
         local extra_options=(--exclude=/{home/.suroot,usr/var/run});
      else
         echo "Fatal: Object '$2' does not support command '$1'" 1>&2;
         return 1;
      fi;
      ;;
   internal)
      if [ $1 == copy ]; then
         SOURCE=$INTERNAL;
         DESTINATION="/d/Zulfilham/Backups/Internal Storage/files";
      else
         echo "Fatal: Object '$2' does not support command '$1'" 1>&2;
         return 1;
      fi;
      ;;
   external)
      if [ $1 == copy ]; then
         if [ -v EXTERNAL ]; then
            SOURCE=$EXTERNAL;
            DESTINATION="/d/Zulfilham/Backups/External Storage/files";
         else
            MESSAGE="Fatal: SD card is not installed on this device";
            echo "$MESSAGE" 1>&2;
            STATUS=FAILURE;
         fi;
      else
         echo "Fatal: Object '$2' does not support command '$1'" 1>&2;
         return 1;
      fi;
      ;;
   gameguardian_scripts)
      if [ $1 == sync ]; then
         SOURCE="$INTERNAL/GameGuardian Scripts";

         if [ -d "$SOURCE" ]; then
            DESTINATION="/d/Zulfilham/Repositories/Zulfilham/GameGuardian Scripts";
         else
            MESSAGE="Fatal: '${SOURCE//\'/\'\\\'\'}': Not a directory";
            echo "$MESSAGE" 1>&2;
            STATUS=FAILURE;
         fi;
      else
         echo "Fatal: Object '$2' does not support command '$1'" 1>&2;
         return 1;
      fi;
      ;;
   audios)
      if [ $1 == sync ]; then
         if [ -v EXTERNAL ]; then
            SOURCE="$EXTERNAL_STORAGE/Audios";

            if [ -d "$SOURCE" ]; then
               DESTINATION="/e/Zulfilham/Audios";
            else
               MESSAGE="Fatal: '${SOURCE//\'/\'\\\'\'}': Not a directory";
               echo "$MESSAGE" 1>&2;
               STATUS=FAILURE;
            fi;
         else
            MESSAGE="Fatal: SD card is not installed on this device";
            echo "$MESSAGE" 1>&2;
            STATUS=FAILURE;
         fi;
      else
         echo "Fatal: Object '$2' does not support command '$1'" 1>&2;
         return 1;
      fi;
      ;;
   garbage)
      if [ "$1" == remove ]; then
         SOURCE=(/storage/emulated/0/{.dlprovider,DCIM/.thumbnails,MIUI/{Gallery,debug_log},WhatsApp/Databases/msgstore-????-??-??.1.db.crypt14,dctp,did,wlan_logs});
      else
         echo "Fatal: Object '$2' does not support command '$1'" 1>&2;
         return 1;
      fi;
      ;;
   *)
      echo "Fatal: Invalid object '$2'" 1>&2;
      return 1;
      ;;
   esac;

   cronlog;

   if [ $STATUS == RUNNING ]; then
      $1 "${extra_options[@]}" && STATUS=SUCCESS || STATUS=FAILURE;
   fi;
   cronlog $STATUS;
   [ $STATUS == SUCCESS ] && return 0 || return 1;
}

main "$@";
